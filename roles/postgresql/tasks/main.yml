---
- name: Install postgresql (and psycopg2)
  apt:
    name:
      - postgresql-{{ postgresql_version }}
      - postgresql-contrib
      - postgresql-client-{{ postgresql_version }}
      - postgresql-client-common
      - python3-psycopg2
    update_cache: yes
  become: yes
  become_user: root

- name: Setup permissions for data directory
  file:
    path: "{{ postgresql_data_dir }}"
    mode: "0700"
    owner: postgres
    group: postgres
    state: directory
  when: postgresql_data_dir
  become: yes
  become_user: root

- name: Check if database is initialized
  stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: pg_version
  when: postgresql_data_dir
  become: yes
  become_user: root

- name: Ensure postgresql database is initialized
  command:
    cmd: "{{ postgresql_bin_dir }}/initdb -D {{ postgresql_data_dir }}"
  when: postgresql_data_dir and (not pg_version.stat.exists)
  become: yes
  become_user: postgres

- name: Setup general settings in postgresql.conf
  lineinfile:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
    regexp: "^#?{{ item.name }}"
    line: "{{ item.name }} = '{{ item.value }}'"
  with_items:
    - name: password_encryption
      value: scram-sha-256
    - name: shared_preload_libraries
      value: pg_stat_statements
    - name: track_activity_query_size
      value: 2048
    - name: pg_stat_statements.track
      value: all
  notify: restart postgresql
  become: yes
  become_user: root

- name: Setup tuning parameters in postgresql.conf
  lineinfile:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
    regexp: "^#?{{ item.name }}"
    line: "{{ item.name }} = {{ item.value }}"
  with_items: "{{ postgresql_tuning_parameters }}"
  notify: restart postgresql
  become: yes
  become_user: root

- name: Setup data directory in postgresql.conf
  lineinfile:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
    regexp: "^#?data_directory"
    line: "data_directory = '{{ postgresql_data_dir }}'"
  when: postgresql_data_dir
  notify: restart postgresql
  become: yes
  become_user: root

- name: Setup listen addresses in postgresql.conf
  lineinfile:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
    regexp: "^#?listen_addresses"
    line: "listen_addresses = 'localhost,{{ postgresql_private_network_ip }}'"
  when: postgresql_private_network_ip
  notify: restart postgresql
  become: yes
  become_user: root

- name: Setup port in postgresql.conf
  lineinfile:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
    regexp: "^#?port"
    line: "port = 5432"
  notify: restart postgresql
  become: yes
  become_user: root

- name: Setup remote access entry in pg_hba.conf
  lineinfile:
    path: "{{ postgresql_conf_dir }}/pg_hba.conf"
    line: "hostssl all all {{ postgresql_private_network_cidr }} scram-sha-256"
  when: postgresql_private_network_cidr
  notify: restart postgresql
  become: yes
  become_user: root

- name: Flush handlers
  meta: flush_handlers

- name: Create cluster users
  postgresql_user:
    name: "{{ item.username }}"
    password: "{{ item.password }}"
  with_items: "{{ postgresql_users }}"
  no_log: yes
  become: yes
  become_user: postgres

- name: Create cluster databases
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner }}"
  with_items: "{{ postgresql_databases }}"
  become: yes
  become_user: postgres

- name: Create database extensions
  postgresql_ext:
    db: "{{ item[0].name }}"
    name: "{{ item[1] }}"
  with_nested:
    - "{{ postgresql_databases }}"
    - "{{ postgresql_extensions }}"
  become: yes
  become_user: postgres

- name: Setup firewall rules
  ufw:
    rule: "{{ item.rule }}"
    port: "{{ item.port }}"
  with_items:
    - rule: allow
      port: 5432
  when: postgresql_private_network_ip
  become: yes
  become_user: root
