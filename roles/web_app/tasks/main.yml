---

- name: Install dependencies
  apt:
    name:
      - apt-transport-https
      - debian-archive-keyring
      - debian-keyring
    update_cache: yes
  become: yes
  become_user: root

- name: Install java
  apt:
    name:
      - openjdk-8-jre-headless
    update_cache: yes
  when: web_app_is_jar
  become: yes
  become_user: root

- name: Setup firewall rules
  ufw:
    rule: "{{ item.rule }}"
    port: "{{ item.port }}"
  with_items:
    - rule: allow
      port: 80
    - rule: allow
      port: 443
  become: yes
  become_user: root

- name: Setup Caddy apt repo key
  apt_key:
    url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
  become: yes
  become_user: root

- name: Setup Caddy apt repo
  apt_repository:
    repo: "{{ item }}"
    update_cache: no
  with_items:
    - "deb https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main"
    - "deb-src https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main"
  become: yes
  become_user: root

- name: Check if Caddyfile exists (to detect initial install)
  stat:
    path: /etc/caddy/Caddyfile
  register: caddyfile_check
  become: yes
  become_user: root

- name: Install Caddy
  apt:
    name: caddy
    update_cache: yes
  become: yes
  become_user: root

- name: Clear default Caddyfile config (upon initial install)
  copy:
    dest: /etc/caddy/Caddyfile
    content: ""
  when: not caddyfile_check.stat.exists
  become: yes
  become_user: root

- name: Add entry to Caddyfile
  blockinfile:
    path: /etc/caddy/Caddyfile
    backup: yes
    create: yes
    mode: "0644"
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ web_app_hostnames[0] }}"
    block: "{{ web_app_hostnames | join(',\n') }} {\n\treverse_proxy 127.0.0.1:{{ web_app_proxy_port }}\n}"
  notify: reload caddy
  become: yes
  become_user: root

- name: Create the application user
  user:
    name: "{{ web_app_user }}"
    shell: /bin/bash
  become: yes
  become_user: root

- name: Setup authorized SSH public key for GitHub Actions
  authorized_key:
    user: "{{ web_app_user }}"
    key: "{{ web_app_deployment_key }}"
  become: yes
  become_user: "{{ web_app_user }}"

- name: Create application config directory
  file:
    path: /etc/{{ web_app_name }}
    mode: "0755"
    state: directory
  become: yes
  become_user: root

- name: Setup systemd environment vars file
  template:
    src: web_app.env.j2
    dest: /etc/{{ web_app_name }}/{{ web_app_name }}.env
    mode: "0600"
  notify: restart web app
  no_log: yes
  become: yes
  become_user: root

- name: Setup export environment vars file
  template:
    src: web_app.exp.j2
    dest: /etc/{{ web_app_name }}/{{ web_app_name }}.exp
    mode: "0600"
  notify: restart web app
  no_log: yes
  become: yes
  become_user: root

- name: Setup systemd service file
  template:
    src: web_app.service.j2
    dest: /etc/systemd/system/{{ web_app_name }}.service
    mode: "0644"
  notify: restart web app
  become: yes
  become_user: root

- name: Allow app user to control its application
  lineinfile:
    path: /etc/sudoers
    line: "{{ web_app_user }} ALL=NOPASSWD: /bin/systemctl {{ item }} {{ web_app_name }}"
    validate: "visudo -cf %s"
  with_items:
    - status
    - start
    - restart
    - reload
  become: yes
  become_user: root

- name: Enable application at startup
  systemd:
    name: "{{ web_app_name }}"
    enabled: yes
    daemon_reload: yes
  become: yes
  become_user: root
